/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
#include "Display.hpp"
#include "Unit.hpp"
#include <string>

//Default Constructor
Display::Display() {
	yshift = 1;
	selecter = 1;
 	unit.set_name("");
	unit.set_health(0);
	unit.set_MAXhealth(0);
	unit.set_mana(0);
	unit.set_MAXmana(0);
	unit.set_attack(0);
	unit.set_defense(0); }
//Overloaded Constructor
Display::Display(int yshift_, int selecter_, std::string name_, int health_, int mana_, int attack_, int defense_) {
	yshift = yshift_;
	selecter = selecter_;
	unit.set_name(name_);
	unit.set_health(health_);
	unit.set_MAXhealth(health_);
	unit.set_mana(mana_);
	unit.set_MAXmana(mana_);
	unit.set_attack(attack_);
	unit.set_defense(defense_); }

void Display::drawGame(int yMax, int xMax) {
  //clear whole screen
  clear();

  //make box for dialogue
  WINDOW * dialoguewin = newwin(yMax-12, xMax-1, 1, 1);
  box(dialoguewin, 0, 0);
  refresh();
  wrefresh(dialoguewin);

  //make box for avatarHUD
  WINDOW * avatarwin = newwin(yMax-1, xMax-(xMax/4), yMax-11, xMax/2);
  box(avatarwin, 0, 0);
  updateAvatarHUD(Player p);
  refresh();
  wrefresh(avatarwin);

  //make box for enemyHUD
  WINDOW * enemywin = newwin(yMax-1, xMax-1, yMax-11, xMax-(xMax/4));
  box(enemywin, 0, 0);
  updateEnemyHUD(Enemy e);
  refresh();
  wrefresh(enemywin);

  //make box for options
  WINDOW * optionwin = newwin(yMax-1, xMax/2, yMax-11, 1);
  box(optionwin, 0, 0);
  updateOptions();
  refresh();
  wrefresh(optionwin);
}
//updates dialogue in dialogue window
void Display::updateDialogue(std::string dialogue){

  //grab dialogue vector and convert to string

  //update dialogue window
  mvwprintw(dialoguewin, this->yshift, 1, "%s", Dialogue);
  refresh();
  wrefresh(dialoguewin);
  set_yshift(yshift+1);
}
void Display::updateCombat(std::string name, int damage){
  mvwprintw(dialoguewin, this->yshift, 1, "%s was attacked for %d damage", name, damage);
  wrefresh(dialoguewin);
  set_yshift(yshift+1);
}
void Display::updateDeath(std::string name){
  mvwprintw(dialoguewin, this->yshift, 1, "%s has been killed", name);
  wrefresh(dialoguewin);
  set_yshift(yshift + 1);
}

void Display::updateAvatarHUD(Player p){
  mvwprintw(avatarwin, 1, 1, "%s", p.get_name());
  mvwprintw(avatarwin, 2, 1, "%d/%d", p.get_health(), p.get_MAXhealth());
  mvwprintw(avatarwin, 3, 1, "%d/%d", p.get_mana(), p.get_MAXmana());
  mvwprintw(avatarwin, 4, 1, "%d", p.get_attack());
  mvwprintw(avatarwin, 5, 1, "%d", p.get_defense());
  wrefresh(avatarwin);

}

void Display::updateEnemyHUD(Enemy e){
  mvwprintw(enemywin, 1, 1, "%s", e.get_name());
  mvwprintw(enemywin, 2, 1, "%d/%d", e.get_health(), e.get_MAXhealth());
  mvwprintw(enemywin, 3, 1, "%d", e.get_mana());
  mvwprintw(enemywin, 4, 1, "%d", e.get_attack());
  mvwprintw(enemywin, 5, 1, "%d", e.get_defense());
  wrefresh(enemywin);
}

void Display::updateOptions(){
  wclear(optionwin);
  wrefresh(optionwin);
  keypad(optionwin, true);
  switch(this->selecter)
  {
    case 1:
    //Spells Options
    string Option1[4] = {"Attack", "Skills", "Flee", "Quit"};
    int choice1;
    int highlight1 = 0;

    while(1)
    {
        for(int i = 0; i < 4; i++)
        {
            if(i == highlight1)
                wattron(optionwin, A_REVERSE);
            mvwprintw(optionwin, i+1, 1, Option1[i].c_str());
            wattroff(optionwin, A_REVERSE);
        }
        choice1 = wgetch(optionwin);

        switch(choice1)
        {
            case KEY_UP:
                highlight1--;
                if(highlight1 == -1)
                    highlight1 = 0;
                break;
            case KEY_DOWN:
                highlight1++;
                if(highlight1 == 4)
                    highlight1 = 3;
                break;
            default:
                break;
        }
        if(choice1 == 10)
            break;
        }
        //Attack with basic damage
        if(Option1[highlight1] == Option1[0])
        {
          break;
        }
        //Go to spells selector
        else if(Option1[highlight1] == Option1[1])
        {
          set_selecter(2);
          break;
        }
        //Flee, stay in first selector
        else if(Option1[highlight1] == Option1[2])
        {
          break;
        }
        //Kill yourself and quits the game
        else if(Option1[highlight1] == Option1[3])
        {
          endwin();
          break;
        }

        case 2:
        //Spells Options
        string Option2[5] = {"Spell 1", "Spell 2", "Spell 3", "Spell 4", "Back"};
        int choice2;
        int highlight2 = 0;

        while(1)
        {
            for(int i = 0; i < 5; i++)
            {
                if(i == highlight2)
                    wattron(optionwin, A_REVERSE);
                mvwprintw(optionwin, i+1, 1, Option2[i].c_str());
                wattroff(optionwin, A_REVERSE);
            }
            choice2 = wgetch(optionwin);

            switch(choice2)
            {
                case KEY_UP:
                    highlight2--;
                    if(highlight2 == -1)
                        highlight2 = 0;
                    break;
                case KEY_DOWN:
                    highlight2++;
                    if(highlight2 == 5)
                        highlight2 = 4;
                    break;
                default:
                    break;
            }
            if(choice2 == 10)
                break;
            }
            //Attack with spell 1 stay in spell selecter
            if(Option2[highlight2] == Option2[0])
            {
              break;
            }
            //Attack with spell 1 stay in spell selecter
            else if(Option2[highlight2] == Option2[1])
            {
              break;
            }
            //Attack with spell 1 stay in spell selecter
            else if(Option2[highlight2] == Option2[2])
            {
              break;
            }
            //Attack with spell 1 stay in spell selecter
            else if(Option2[highlight2] == Option2[3])
            {
              break;
            }
            //Go back to first selecter
            else if(Option2[highlight2] == Option2[4])
            {
              set_selecter(1);
              break;
            }
						break;
						default:
							throw "not an option"
    }//end of switch(selecter) statment
  }//end of updateOptions function

      //Getters
      int Display::get_yshift() {return yshift;}
      int Display::get_selecter() {return selecter;}

      //Setters
      void Display::set_yshift(int y) {this->yshift = y;}
      void Display::set_selecter(int s) {this->selecter = s;}
